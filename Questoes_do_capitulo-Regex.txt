1.  compile() but you have to use re.compile()
2.  because it's often necessary to use escape character
3.  searches for the first matched object in a string
4.  you use the group() function, or equivalent
5.  (\d\d\d); (\d\d\d-\d\d\d\d); None // Group 0 is the entire match, group 1 covers the first set of parentheses,
and group 2 covers the second set of parentheses.
6.  using the '\' before the element
7.  if the regex object has one or more groups and the method finds one or more groups it returns a list of tuples, else it returns a list fo strings
8.  'or'
9.  it may or my not contain the expression before it or activates non-greedy mode
10. + == appears one or more times; * == appears zero or more times
11. {3} == appears strictly 3 times; {3,5} == appears from 3 to 5 times
12. \d == any numeric character; \w == any letter; \s == any spacer character
13. same as in 12. but excluding those characters
14. re.compile(regex, re.I)
15. anything except \s; if you pass re.DOTALL it includes the \s 
16. greedy and non-greedy respectively
17. [a-z0-9]
18. AttributeError: 'tuple' object has no attribute 'sub' // 'X drummers, X pipers, five rings, X hens'
19. allows the use of space characters inside the regex object without making them count // and comments
20. r'(\d{,3})|(\d{,3},' // re.compile(r'^\d{1,3}(,\d{3})*$')
21. r'[A-Z]\w+\s[A-Z]\w+' // re.compile(r'[A-Z][a-z]*\sNakamoto')
22. r'(Alice|Bob|Carol)\s(eats|pets|throws)\s(apples|cats|baseballs)\., re.I'